//* Storage
// с появлением веб-приложений, потребовалось хранить пользоват инфо непосред на клиентском компьютере
// инфо, относящаяся к конкретн пользователю, должна нах на его компе (сведения для входа в сисетму, предпочтения и др)
// тип Storage позвол хранить пары имен и значений, при этом макс объем хранилища определяется браузером

//* Session storage
// объект sessionStorage хранит данные только в теч сеанса, тесоть до закрытия браузера
// данные, сохраненные в объекте sessionStorage остаюься в нем при обнавление стр
// сущ только в рамках тек вкладки браузера
// др вкладка с той же страницей будет иметь др хранилище
// данные продолжают существовать после перезагрузки стр, но не после закрытия/открытия вкладки

//* localStorage
// осн особенности:
// этот объект один на все вкладки и окна в рамках источника (один и тот же домен/протокол/порт)
// данные не имеют срока давности по кот они истекают или удаляются
// сохраняются после перезапуска браузера и даже оперц системы

// Методы
// setItem(key, value) - сохранить пару ключ-значение
// getItem(key) - получить данные по ключу
// removeItem(key) - удалить данные с ключом
// clear() - удалить все
// key(index) - получить ключ по заданной позиции
// length - кол-во элементов в хранилище

// important!
// value в storage мб только типа string

//* Событие storage
// когда обновляются данные в localStorage/sessionStorage генерир событие storage:
window.onstorage = (e) => {};


// 1
window.addEventListener('load', () => checkStorage());

const checkStorage = () => {
    const name = localStorage.getItem('name';)
    if (name) {
        document.getElementById('main').innerHTML = 'Добро пожаловать', ${name};
    }
}

const save = () => {
    const value = document.getElementById('name').value;
    if (!value) {
        alert('Введите имя');
        return;
    }
    localStorage.setItem('name', value);
    if (localStorage.getItem('name')) {
        main.innerHTML = 'Добро пожаловать' + localStorage.getItem('name');
    }
}




// 2

